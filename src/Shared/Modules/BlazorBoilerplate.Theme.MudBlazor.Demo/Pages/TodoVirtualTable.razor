@page "/todos-virtualtable"
@inject IApiClient apiClient
@inject IViewNotifier viewNotifier
@inject IStringLocalizer<Global> L

<TopSection>
    <Breadcrumbs>
        <Breadcrumb Title="Todo List" />
    </Breadcrumbs>
</TopSection>

<PageTitle>Todo Virtual Table - CRUD</PageTitle>
<p class="my-3">
    This Todo Virtual Table demonstrates fetching data from the server and CRUD for Blazor with <a href="http://breeze.github.io" target="_blank">Breeze</a> to make API design easy.
    <br />Check out the <a href="https://github.com/enkodellc/blazorboilerplate" target="_blank">repository to view the source.</a>
    <br />If you find this helpful please contribute or <DonateButton /> to support further development.
    <br /><b>Delete is Protected to Admin users only</b>.
</p>

<DateTimeFilter Busy="_busy" Filter="filter" />

<MudGrid>
    <MudItem xs="6" sm="3">
        <MudSelect Disabled="@_busy" @bind-Value="@filter.CreatedById" FullWidth="true" Label="Creators">
            @foreach (var user in _creators)
            {
                <MudSelectItem Value="@user.Id">@user.DisplayValue</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="6" sm="3">
        <MudSelect Disabled="@_busy" @bind-Value="@filter.ModifiedById" FullWidth="true" Label="Editors">
            @foreach (var user in _editors)
            {
                <MudSelectItem Value="@user.Id">@user.DisplayValue</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="6" sm="3">
        <MudCheckBox @bind-Checked="@filter.IsCompleted" Size="Size.Large" TriState="true">Is Completed</MudCheckBox>
    </MudItem>
    <MudItem xs="6" sm="3">

    </MudItem>
</MudGrid>

@{
#if DEBUG
    {
        <div style="margin: 20px; font-weight: bold; font-size: 18px">Total item Count: _itemCount - Start index: _startIndex - Page size: _pageSize</div>
    }
#else
{
<div style="margin: 20px; font-weight: bold; font-size: 18px">Total item Count: @itemCount</div>
    }
#endif
}

<MudGrid Style="font-weight:bold;background-color:#ddd;margin:0" Class="align-center">
    <MudItem xs="2">
        <MudButton StartIcon="@Icons.Filled.PlaylistAdd" OnClick="@((e) => OpenDialog())" Variant="Variant.Filled" Color="Color.Primary">New Todo</MudButton>
    </MudItem>
    <MudItem xs="2">Todo</MudItem>
    <MudItem xs="2">Completed</MudItem>
    <MudItem xs="2">Created on</MudItem>
    <MudItem xs="2">Created by</MudItem>
    <MudItem xs="2">Modified by</MudItem>
</MudGrid>
<div style="height:360px;overflow-y:auto;overflow-x:hidden;width:calc(100% + 24px);">
    <Virtualize @ref="_asyncVirtualize" Context="item" ItemsProvider="LoadToDos" ItemSize="72" OverscanCount="20">
        <ItemContent>
            <MudGrid Class="align-center" @key="item.Id" Style="border-bottom: 1px solid #eee;">
                <MudItem xs="2"><MudIconButton Icon="@Icons.Filled.Delete" OnClick="@(() => OpenDeleteDialog(item))"></MudIconButton></MudItem>
                <MudItem xs="2">@item.Title</MudItem>
                <MudItem xs="2"><MudCheckBox Checked="@item.IsCompleted" CheckedChanged="@((bool i) => Update(item))"></MudCheckBox></MudItem>
                <MudItem xs="2">@item.CreatedOn</MudItem>
                <MudItem xs="2">@item.CreatedBy?.UserName</MudItem>
                <MudItem xs="2">@item.ModifiedBy?.UserName</MudItem>
            </MudGrid>
        </ItemContent>
        <Placeholder>
            <div style="border-bottom: 1px solid #eee;">
                <MudProgressCircular Color="Color.Default" Indeterminate="true" />
            </div>
        </Placeholder>
    </Virtualize>
</div>

@if (_currentTodo != null)
{<MudDialog @bind-IsVisible="@_dialogIsOpen">
     <TitleContent>
         <MudText Typo="Typo.h6">
             <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1" />
             Create Ain't Got Shit Todo
         </MudText>
     </TitleContent>
        <DialogContent>
            <EditForm id="newTodoForm" Model="@_currentTodo" OnValidSubmit="@NewEntity">
                <FluentValidationValidator />
                <MudValidationSummary />
                <MudTextField
                    @bind-Value="@_currentTodo.Title"
                    Label="The Big Ole Title"
                    AdornmentIcon="@Icons.Filled.Title"
                    Adornment="Adornment.End"
                    FullWidth="true"
                    Required="true"
                    RequiredError=@L["Required"]>
                </MudTextField>

                <MudCheckBox @bind-Checked="@_currentTodo.IsCompleted" Label="Completed"></MudCheckBox>
            </EditForm>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="@(e => { _dialogIsOpen = false; })">@L["Cancel"]</MudButton>
            <MudButton ButtonType="ButtonType.Submit" form="newTodoForm" Variant="Variant.Filled" Color="Color.Primary">Create Todo</MudButton>
        </DialogActions>
    </MudDialog>

    <MudDialog @bind-IsVisible="@_deleteDialogOpen" Style="z-index:100">
        <TitleContent>
            <MudText Typo="Typo.h6"> <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Class="mr-3 mb-n1" /> @L["Confirm Delete"] </MudText>
        </TitleContent>
        <DialogContent> @L["Are you sure you want to delete {0}?", _currentTodo.Title] </DialogContent>
        <DialogActions>
            <MudButton OnClick="@(e => { _deleteDialogOpen = false; })">@L["Cancel"]</MudButton>
            <MudButton OnClick="@Delete" Variant="Variant.Filled" Color="Color.Error">@L["Delete"]</MudButton>
        </DialogActions>
    </MudDialog>
}

@code {
    private ToDoFilter filter = new();
    private Virtualize<Todo> _asyncVirtualize;

    private List<SelectItem<Guid?>> _creators = new();
    private List<SelectItem<Guid?>> _editors = new();

    private bool _busy;
    private bool _deleteDialogOpen = false;
    private bool _dialogIsOpen = false;

    private int _itemCount;


#if DEBUG
    private int _startIndex;
    private int _pageSize;
#endif

    private Todo _currentTodo = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadFilters();

        filter.PropertyChanged += FilterPropertyChanged;
    }

    private async void FilterPropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        _busy = true;

        await LoadFilters(e.PropertyName);

        apiClient.ClearEntitiesCache();
        await _asyncVirtualize.RefreshDataAsync();

        _busy = false;

        StateHasChanged();
    }

    private async Task LoadFilters(string propertyName = null)
    {
        var tasks = new Dictionary<string, Task>();

        if (propertyName != nameof(filter.CreatedById))
            tasks.Add("GetTodoCreators", apiClient.GetTodoCreators(filter));

        if (propertyName != nameof(filter.ModifiedById))
            tasks.Add("GetTodoEditors", apiClient.GetTodoEditors(filter));

        await Task.WhenAll(tasks.Values.ToArray());

        foreach (var task in tasks)
        {
            if (task.Key == "GetTodoCreators")
            {
                var t = (Task<QueryResult<ApplicationUser>>)task.Value;

                if (!t.IsFaulted)
                {
                    _creators = t.Result.Select(i => new SelectItem<Guid?> { Id = i.Id, DisplayValue = i.UserName }).ToList();

                    _creators.Insert(0, new SelectItem<Guid?> { Id = null, DisplayValue = "-" });
                }
                else
                    viewNotifier.Show(t.Exception.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
            }
            else if (task.Key == "GetTodoEditors")
            {
                var t = (Task<QueryResult<ApplicationUser>>)task.Value;

                if (!t.IsFaulted)
                {
                    _editors = t.Result.Select(i => new SelectItem<Guid?> { Id = i.Id, DisplayValue = i.UserName }).ToList();

                    _editors.Insert(0, new SelectItem<Guid?> { Id = null, DisplayValue = "-" });
                }
                else
                    viewNotifier.Show(t.Exception.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
            }
        }
    }

    private async ValueTask<ItemsProviderResult<Todo>> LoadToDos(ItemsProviderRequest request)
    {
#if DEBUG
        _startIndex = request.StartIndex;
        _pageSize = request.Count;
#endif

        var items = await apiClient.GetToDos(filter,
        request.Count,
        request.StartIndex);

        _itemCount = (int)items.InlineCount;

        if (request.StartIndex == 0)
            StateHasChanged();

#if DEBUG
        StateHasChanged();
#endif

        return new ItemsProviderResult<Todo>(items, _itemCount);
    }

    public async void Update(Todo todo)
    {
        try
        {
            todo.IsCompleted = !todo.IsCompleted;

            await apiClient.SaveChanges();

            viewNotifier.Show($"{todo.Title} updated", ViewNotifierType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }

    public async Task Delete()
    {
        try
        {
            apiClient.RemoveEntity(_currentTodo);
            await apiClient.SaveChanges();

            apiClient.ClearEntitiesCache();
            await _asyncVirtualize.RefreshDataAsync();

            viewNotifier.Show($"{_currentTodo.Title} deleted", ViewNotifierType.Success, L["Operation Successful"]);
        }
        catch (Exception ex)
        {
            apiClient.CancelChanges();
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }

        _currentTodo = new Todo();

        _deleteDialogOpen = false;
    }

    public void OpenDialog()
    {
        _currentTodo = new Todo();
        _dialogIsOpen = true;
    }

    public void OpenDeleteDialog(Todo todo)
    {
        _currentTodo = todo;
        _deleteDialogOpen = true;
    }

    public async Task NewEntity()
    {
        _dialogIsOpen = false;

        try
        {
            apiClient.AddEntity(_currentTodo);

            await apiClient.SaveChanges();

            apiClient.ClearEntitiesCache();
            await _asyncVirtualize.RefreshDataAsync();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            apiClient.CancelChanges();
            viewNotifier.Show(ex.GetBaseException().Message, ViewNotifierType.Error, L["Operation Failed"]);
        }
    }
}
