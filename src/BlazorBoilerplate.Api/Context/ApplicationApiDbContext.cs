// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using BlazorBoilerplate.Api.SubContext.Configurations;
using BlazorBoilerplate.Api.SubModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using System;
using System.Collections.Generic;
#nullable disable

namespace BlazorBoilerplate.Api.SubContext
{
    public partial class ApplicationApiDbContext : DbContext
    {
        public ApplicationApiDbContext()
        {
        }

        public ApplicationApiDbContext(DbContextOptions<ApplicationApiDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AcctBatch> AcctBatches { get; set; }
        public virtual DbSet<AcctBatchDay> AcctBatchDays { get; set; }
        public virtual DbSet<AcctBatchDetail> AcctBatchDetails { get; set; }
        public virtual DbSet<AcctLink> AcctLinks { get; set; }
        public virtual DbSet<AcctOption> AcctOptions { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<AntechBreed> AntechBreeds { get; set; }
        public virtual DbSet<AntechBreedsMap> AntechBreedsMaps { get; set; }
        public virtual DbSet<AntechProduct> AntechProducts { get; set; }
        public virtual DbSet<AntechProductMap> AntechProductMaps { get; set; }
        public virtual DbSet<AntechSpeciesMap> AntechSpeciesMaps { get; set; }
        public virtual DbSet<AntechSpecy> AntechSpecies { get; set; }
        public virtual DbSet<Application> Applications { get; set; }
        public virtual DbSet<ApplicationModule> ApplicationModules { get; set; }
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<ApptAccount> ApptAccounts { get; set; }
        public virtual DbSet<ApptAppliedBlockDay> ApptAppliedBlockDays { get; set; }
        public virtual DbSet<ApptAppliedBlockTime> ApptAppliedBlockTimes { get; set; }
        public virtual DbSet<ApptBlockDay> ApptBlockDays { get; set; }
        public virtual DbSet<ApptBlockTime> ApptBlockTimes { get; set; }
        public virtual DbSet<ApptCallHistory> ApptCallHistories { get; set; }
        public virtual DbSet<ApptCallMessage> ApptCallMessages { get; set; }
        public virtual DbSet<ApptCallOption> ApptCallOptions { get; set; }
        public virtual DbSet<ApptColorScheme> ApptColorSchemes { get; set; }
        public virtual DbSet<ApptGroup> ApptGroups { get; set; }
        public virtual DbSet<ApptIcon> ApptIcons { get; set; }
        public virtual DbSet<ApptLabelComment> ApptLabelComments { get; set; }
        public virtual DbSet<ApptOption> ApptOptions { get; set; }
        public virtual DbSet<ApptOptionField> ApptOptionFields { get; set; }
        public virtual DbSet<ApptRecurring> ApptRecurrings { get; set; }
        public virtual DbSet<ApptResource> ApptResources { get; set; }
        public virtual DbSet<ApptResourceGroup> ApptResourceGroups { get; set; }
        public virtual DbSet<ApptStatusType> ApptStatusTypes { get; set; }
        public virtual DbSet<ApptType> ApptTypes { get; set; }
        public virtual DbSet<ApptUserPref> ApptUserPrefs { get; set; }
        public virtual DbSet<ArAssignedTemplate> ArAssignedTemplates { get; set; }
        public virtual DbSet<ArBuildHistory> ArBuildHistories { get; set; }
        public virtual DbSet<ArChargeInterest> ArChargeInterests { get; set; }
        public virtual DbSet<ArClientSetting> ArClientSettings { get; set; }
        public virtual DbSet<ArCommon> ArCommons { get; set; }
        public virtual DbSet<ArGlobalSetting> ArGlobalSettings { get; set; }
        public virtual DbSet<ArStmtHistory> ArStmtHistories { get; set; }
        public virtual DbSet<ArStmtTemplate> ArStmtTemplates { get; set; }
        public virtual DbSet<AspError> AspErrors { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<Breed> Breeds { get; set; }
        public virtual DbSet<BucketTotal> BucketTotals { get; set; }
        public virtual DbSet<BucketTotalsGlobal> BucketTotalsGlobals { get; set; }
        public virtual DbSet<BucketTotalsPcat> BucketTotalsPcats { get; set; }
        public virtual DbSet<BucketTotalsPcenter> BucketTotalsPcenters { get; set; }
        public virtual DbSet<BucketTotalsPmt> BucketTotalsPmts { get; set; }
        public virtual DbSet<BucketTotalsPtype> BucketTotalsPtypes { get; set; }
        public virtual DbSet<BucketTotalsTaxis> BucketTotalsTaxes { get; set; }
        public virtual DbSet<Cage> Cages { get; set; }
        public virtual DbSet<CallLog> CallLogs { get; set; }
        public virtual DbSet<CallLogPatient> CallLogPatients { get; set; }
        public virtual DbSet<CashDrawer> CashDrawers { get; set; }
        public virtual DbSet<CashDrawersSb> CashDrawersSbs { get; set; }
        public virtual DbSet<Cashier> Cashiers { get; set; }
        public virtual DbSet<CensusLayout> CensusLayouts { get; set; }
        public virtual DbSet<CensusLocation> CensusLocations { get; set; }
        public virtual DbSet<CensusOption> CensusOptions { get; set; }
        public virtual DbSet<CensusPatientLog> CensusPatientLogs { get; set; }
        public virtual DbSet<CensusPatientLogLocation> CensusPatientLogLocations { get; set; }
        public virtual DbSet<CensusResource> CensusResources { get; set; }
        public virtual DbSet<CensusResourceLog> CensusResourceLogs { get; set; }
        public virtual DbSet<CensusResourceLogLocation> CensusResourceLogLocations { get; set; }
        public virtual DbSet<CensusUserSetting> CensusUserSettings { get; set; }
        public virtual DbSet<CensusVisitReason> CensusVisitReasons { get; set; }
        public virtual DbSet<CensusWorkstation> CensusWorkstations { get; set; }
        public virtual DbSet<Certificate> Certificates { get; set; }
        public virtual DbSet<CertificateField> CertificateFields { get; set; }
        public virtual DbSet<CertificatesTemplate> CertificatesTemplates { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<ClientAutonumber> ClientAutonumbers { get; set; }
        public virtual DbSet<ClientDefault> ClientDefaults { get; set; }
        public virtual DbSet<ClientDuplicateOption> ClientDuplicateOptions { get; set; }
        public virtual DbSet<ClientLock> ClientLocks { get; set; }
        public virtual DbSet<ClientNote> ClientNotes { get; set; }
        public virtual DbSet<ClientNoteStatus> ClientNoteStatuses { get; set; }
        public virtual DbSet<ClientType> ClientTypes { get; set; }
        public virtual DbSet<ClientYtd> ClientYtds { get; set; }
        public virtual DbSet<ClinicSchedule> ClinicSchedules { get; set; }
        public virtual DbSet<CoatColor> CoatColors { get; set; }
        public virtual DbSet<Common> Commons { get; set; }
        public virtual DbSet<CommunicationMethod> CommunicationMethods { get; set; }
        public virtual DbSet<Consent2> Consent2s { get; set; }
        public virtual DbSet<Consent2Fld> Consent2Flds { get; set; }
        public virtual DbSet<Consent2Msg> Consent2Msgs { get; set; }
        public virtual DbSet<ControlledSubstance> ControlledSubstances { get; set; }
        public virtual DbSet<CorpAttribute> CorpAttributes { get; set; }
        public virtual DbSet<CorpAttributeInv> CorpAttributeInvs { get; set; }
        public virtual DbSet<CorpAttributeProd> CorpAttributeProds { get; set; }
        public virtual DbSet<CorpClientLock> CorpClientLocks { get; set; }
        public virtual DbSet<CorpDatabase> CorpDatabases { get; set; }
        public virtual DbSet<CorpDatesAdded> CorpDatesAddeds { get; set; }
        public virtual DbSet<CorpEmployeeCom> CorpEmployeeComs { get; set; }
        public virtual DbSet<CorpEmployeeComProd> CorpEmployeeComProds { get; set; }
        public virtual DbSet<CorpFranCommunication> CorpFranCommunications { get; set; }
        public virtual DbSet<CorpFranName> CorpFranNames { get; set; }
        public virtual DbSet<CorpImage> CorpImages { get; set; }
        public virtual DbSet<CorpImageText> CorpImageTexts { get; set; }
        public virtual DbSet<CorpImageThumbnail> CorpImageThumbnails { get; set; }
        public virtual DbSet<CorpMessage> CorpMessages { get; set; }
        public virtual DbSet<CorpMessageStatus> CorpMessageStatuses { get; set; }
        public virtual DbSet<CorpMrEfPic> CorpMrEfPics { get; set; }
        public virtual DbSet<CorpMrView> CorpMrViews { get; set; }
        public virtual DbSet<CorpMrcv> CorpMrcvs { get; set; }
        public virtual DbSet<CorpMrcvClientPatient> CorpMrcvClientPatients { get; set; }
        public virtual DbSet<CorpOption> CorpOptions { get; set; }
        public virtual DbSet<CorpPractice> CorpPractices { get; set; }
        public virtual DbSet<CorpPricing> CorpPricings { get; set; }
        public virtual DbSet<CorpPricingAtt> CorpPricingAtts { get; set; }
        public virtual DbSet<CorpPricingInv> CorpPricingInvs { get; set; }
        public virtual DbSet<CorpPricingProd> CorpPricingProds { get; set; }
        public virtual DbSet<CorpRemote> CorpRemotes { get; set; }
        public virtual DbSet<CorpRemoteDatabase> CorpRemoteDatabases { get; set; }
        public virtual DbSet<CorpServer> CorpServers { get; set; }
        public virtual DbSet<CorpSsResult> CorpSsResults { get; set; }
        public virtual DbSet<CorpSsResultsLink> CorpSsResultsLinks { get; set; }
        public virtual DbSet<CorpTask> CorpTasks { get; set; }
        public virtual DbSet<CorpTaxing> CorpTaxings { get; set; }
        public virtual DbSet<CorpTaxingProd> CorpTaxingProds { get; set; }
        public virtual DbSet<CorpTran> CorpTrans { get; set; }
        public virtual DbSet<CorpTransErr> CorpTransErrs { get; set; }
        public virtual DbSet<CorpTransM> CorpTransMs { get; set; }
        public virtual DbSet<CorpTransMsg> CorpTransMsgs { get; set; }
        public virtual DbSet<CorpVendorsLink> CorpVendorsLinks { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<CsCommon> CsCommons { get; set; }
        public virtual DbSet<CustomDict> CustomDicts { get; set; }
        public virtual DbSet<DLayout> DLayouts { get; set; }
        public virtual DbSet<DbClient> DbClients { get; set; }
        public virtual DbSet<DbColumn> DbColumns { get; set; }
        public virtual DbSet<DbIntUpdate> DbIntUpdates { get; set; }
        public virtual DbSet<DbInventory> DbInventories { get; set; }
        public virtual DbSet<DbModule> DbModules { get; set; }
        public virtual DbSet<DbModulesM> DbModulesMs { get; set; }
        public virtual DbSet<DbPatient> DbPatients { get; set; }
        public virtual DbSet<DbProduct> DbProducts { get; set; }
        public virtual DbSet<DbSexPronoun> DbSexPronouns { get; set; }
        public virtual DbSet<DbTable> DbTables { get; set; }
        public virtual DbSet<DesktopReport> DesktopReports { get; set; }
        public virtual DbSet<Dicomae> Dicomaes { get; set; }
        public virtual DbSet<Discount> Discounts { get; set; }
        public virtual DbSet<DiscountPercent> DiscountPercents { get; set; }
        public virtual DbSet<DiscountType> DiscountTypes { get; set; }
        public virtual DbSet<DocumentsHistory> DocumentsHistories { get; set; }
        public virtual DbSet<DocumentsUserOption> DocumentsUserOptions { get; set; }
        public virtual DbSet<EcRptDetail> EcRptDetails { get; set; }
        public virtual DbSet<EfComboValue> EfComboValues { get; set; }
        public virtual DbSet<EfLabField> EfLabFields { get; set; }
        public virtual DbSet<EfLabFieldValue> EfLabFieldValues { get; set; }
        public virtual DbSet<EfLabFieldsDyna> EfLabFieldsDynas { get; set; }
        public virtual DbSet<Eform> Eforms { get; set; }
        public virtual DbSet<EformCategory> EformCategories { get; set; }
        public virtual DbSet<EformsCat> EformsCats { get; set; }
        public virtual DbSet<EformsField> EformsFields { get; set; }
        public virtual DbSet<EformsTable> EformsTables { get; set; }
        public virtual DbSet<EmailAddress> EmailAddresses { get; set; }
        public virtual DbSet<EmailBlocked> EmailBlockeds { get; set; }
        public virtual DbSet<EmailSetting> EmailSettings { get; set; }
        public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }
        public virtual DbSet<EmailTopic> EmailTopics { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeBundle> EmployeeBundles { get; set; }
        public virtual DbSet<EmployeeBundleDtl> EmployeeBundleDtls { get; set; }
        public virtual DbSet<EmployeeCommission> EmployeeCommissions { get; set; }
        public virtual DbSet<EmployeeCustom> EmployeeCustoms { get; set; }
        public virtual DbSet<EmployeeGroup> EmployeeGroups { get; set; }
        public virtual DbSet<EmployeesCertificate> EmployeesCertificates { get; set; }
        public virtual DbSet<EmployeesM> EmployeesMs { get; set; }
        public virtual DbSet<EmployeesMr> EmployeesMrs { get; set; }
        public virtual DbSet<EmployeesRecheck> EmployeesRechecks { get; set; }
        public virtual DbSet<Estimate> Estimates { get; set; }
        public virtual DbSet<EstimateColorsB> EstimateColorsBs { get; set; }
        public virtual DbSet<EstimateConsent2> EstimateConsent2s { get; set; }
        public virtual DbSet<EstimateConsent2Msg> EstimateConsent2Msgs { get; set; }
        public virtual DbSet<EstimateFlagsB> EstimateFlagsBs { get; set; }
        public virtual DbSet<EstimateLabelsB> EstimateLabelsBs { get; set; }
        public virtual DbSet<EstimatePracticeConsent> EstimatePracticeConsents { get; set; }
        public virtual DbSet<EstimatePracticeSetting> EstimatePracticeSettings { get; set; }
        public virtual DbSet<EstimateProduct> EstimateProducts { get; set; }
        public virtual DbSet<EstimateProductEmployee> EstimateProductEmployees { get; set; }
        public virtual DbSet<EstimateSectionField> EstimateSectionFields { get; set; }
        public virtual DbSet<EstimateSectionsB> EstimateSectionsBs { get; set; }
        public virtual DbSet<EstimateTemplate> EstimateTemplates { get; set; }
        public virtual DbSet<EstimateTemplatesB> EstimateTemplatesBs { get; set; }
        public virtual DbSet<EventLog> EventLogs { get; set; }
        public virtual DbSet<EventLogOption> EventLogOptions { get; set; }
        public virtual DbSet<ExportField> ExportFields { get; set; }
        public virtual DbSet<ExportTemplate> ExportTemplates { get; set; }
        public virtual DbSet<FieldDefinition> FieldDefinitions { get; set; }
        public virtual DbSet<FindScreen> FindScreens { get; set; }
        public virtual DbSet<Flag> Flags { get; set; }
        public virtual DbSet<GlobalDictionary> GlobalDictionaries { get; set; }
        public virtual DbSet<HardcodedPrinter> HardcodedPrinters { get; set; }
        public virtual DbSet<HdAcct> HdAccts { get; set; }
        public virtual DbSet<HdCancelItem> HdCancelItems { get; set; }
        public virtual DbSet<HdError> HdErrors { get; set; }
        public virtual DbSet<HdInv> HdInvs { get; set; }
        public virtual DbSet<HdInvM> HdInvMs { get; set; }
        public virtual DbSet<HdList> HdLists { get; set; }
        public virtual DbSet<HdLock> HdLocks { get; set; }
        public virtual DbSet<HdOption> HdOptions { get; set; }
        public virtual DbSet<HdOrder> HdOrders { get; set; }
        public virtual DbSet<HdOrderHistory> HdOrderHistories { get; set; }
        public virtual DbSet<HdOrderItem> HdOrderItems { get; set; }
        public virtual DbSet<HdOrderItemEmployee> HdOrderItemEmployees { get; set; }
        public virtual DbSet<HdOrderItemRx> HdOrderItemRxes { get; set; }
        public virtual DbSet<HdPriceQuote> HdPriceQuotes { get; set; }
        public virtual DbSet<HdRxDefault> HdRxDefaults { get; set; }
        public virtual DbSet<HdSex> HdSexes { get; set; }
        public virtual DbSet<HdSpecy> HdSpecies { get; set; }
        public virtual DbSet<HdVpr> HdVprs { get; set; }
        public virtual DbSet<HealthPlan> HealthPlans { get; set; }
        public virtual DbSet<HealthPlanProduct> HealthPlanProducts { get; set; }
        public virtual DbSet<HealthyPetOption> HealthyPetOptions { get; set; }
        public virtual DbSet<IPatch> IPatches { get; set; }
        public virtual DbSet<IaCommon> IaCommons { get; set; }
        public virtual DbSet<IdvDynChange> IdvDynChanges { get; set; }
        public virtual DbSet<Image> Images { get; set; }
        public virtual DbSet<ImageText> ImageTexts { get; set; }
        public virtual DbSet<ImageThumbnail> ImageThumbnails { get; set; }
        public virtual DbSet<ImpEmailLog> ImpEmailLogs { get; set; }
        public virtual DbSet<ImportLabWidth> ImportLabWidths { get; set; }
        public virtual DbSet<InfoNote> InfoNotes { get; set; }
        public virtual DbSet<InvBarcodeLink> InvBarcodeLinks { get; set; }
        public virtual DbSet<InventoryAdjustment> InventoryAdjustments { get; set; }
        public virtual DbSet<InventoryAttribute> InventoryAttributes { get; set; }
        public virtual DbSet<InventoryBarcode> InventoryBarcodes { get; set; }
        public virtual DbSet<InventoryCat> InventoryCats { get; set; }
        public virtual DbSet<InventoryDefault> InventoryDefaults { get; set; }
        public virtual DbSet<InventoryInteraction> InventoryInteractions { get; set; }
        public virtual DbSet<InventoryItem> InventoryItems { get; set; }
        public virtual DbSet<InventoryItemsM> InventoryItemsMs { get; set; }
        public virtual DbSet<InventoryLot> InventoryLots { get; set; }
        public virtual DbSet<InventoryOption> InventoryOptions { get; set; }
        public virtual DbSet<InventoryPvplink> InventoryPvplinks { get; set; }
        public virtual DbSet<InventoryQtyCommitted> InventoryQtyCommitteds { get; set; }
        public virtual DbSet<InventoryStorage> InventoryStorages { get; set; }
        public virtual DbSet<InventoryStorageItem> InventoryStorageItems { get; set; }
        public virtual DbSet<InventoryUserPref> InventoryUserPrefs { get; set; }
        public virtual DbSet<InventoryVendor> InventoryVendors { get; set; }
        public virtual DbSet<InventoryWant> InventoryWants { get; set; }
        public virtual DbSet<InvoiceAttachedMr> InvoiceAttachedMrs { get; set; }
        public virtual DbSet<InvoiceClientSupermode> InvoiceClientSupermodes { get; set; }
        public virtual DbSet<InvoiceColorsB> InvoiceColorsBs { get; set; }
        public virtual DbSet<InvoiceDefaultTemplate> InvoiceDefaultTemplates { get; set; }
        public virtual DbSet<InvoiceEmpBunLog> InvoiceEmpBunLogs { get; set; }
        public virtual DbSet<InvoiceFlagsB> InvoiceFlagsBs { get; set; }
        public virtual DbSet<InvoiceHealthPlan> InvoiceHealthPlans { get; set; }
        public virtual DbSet<InvoiceHealthPlanProduct> InvoiceHealthPlanProducts { get; set; }
        public virtual DbSet<InvoiceInventory> InvoiceInventories { get; set; }
        public virtual DbSet<InvoiceInventoryLot> InvoiceInventoryLots { get; set; }
        public virtual DbSet<InvoiceLabelsB> InvoiceLabelsBs { get; set; }
        public virtual DbSet<InvoiceListinfo> InvoiceListinfos { get; set; }
        public virtual DbSet<InvoiceLog> InvoiceLogs { get; set; }
        public virtual DbSet<InvoicePatient> InvoicePatients { get; set; }
        public virtual DbSet<InvoicePracticeSetting> InvoicePracticeSettings { get; set; }
        public virtual DbSet<InvoiceProduct> InvoiceProducts { get; set; }
        public virtual DbSet<InvoiceProductEmployee> InvoiceProductEmployees { get; set; }
        public virtual DbSet<InvoiceReceiptTemp> InvoiceReceiptTemps { get; set; }
        public virtual DbSet<InvoiceRx> InvoiceRxes { get; set; }
        public virtual DbSet<InvoiceScript> InvoiceScripts { get; set; }
        public virtual DbSet<InvoiceSectionField> InvoiceSectionFields { get; set; }
        public virtual DbSet<InvoiceSectionsB> InvoiceSectionsBs { get; set; }
        public virtual DbSet<InvoiceSessionEmployee> InvoiceSessionEmployees { get; set; }
        public virtual DbSet<InvoiceSplitBilling> InvoiceSplitBillings { get; set; }
        public virtual DbSet<InvoiceStatus> InvoiceStatuses { get; set; }
        public virtual DbSet<InvoiceSupermode> InvoiceSupermodes { get; set; }
        public virtual DbSet<InvoiceTemplate> InvoiceTemplates { get; set; }
        public virtual DbSet<InvoiceTemplateImage> InvoiceTemplateImages { get; set; }
        public virtual DbSet<InvoiceTemplatesB> InvoiceTemplatesBs { get; set; }
        public virtual DbSet<InvoiceTimer> InvoiceTimers { get; set; }
        public virtual DbSet<Ipacslookup> Ipacslookups { get; set; }
        public virtual DbSet<ItemSig> ItemSigs { get; set; }
        public virtual DbSet<LabValueRange> LabValueRanges { get; set; }
        public virtual DbSet<LabelBundle> LabelBundles { get; set; }
        public virtual DbSet<LabelBundleItem> LabelBundleItems { get; set; }
        public virtual DbSet<LabelDefault> LabelDefaults { get; set; }
        public virtual DbSet<LabelItemsEnh> LabelItemsEnhs { get; set; }
        public virtual DbSet<LabelItemsStd> LabelItemsStds { get; set; }
        public virtual DbSet<LabelLog> LabelLogs { get; set; }
        public virtual DbSet<LabelPage> LabelPages { get; set; }
        public virtual DbSet<LabelPrinter> LabelPrinters { get; set; }
        public virtual DbSet<LabelsEnh> LabelsEnhs { get; set; }
        public virtual DbSet<LabelsStd> LabelsStds { get; set; }
        public virtual DbSet<License> Licenses { get; set; }
        public virtual DbSet<LinkedProduct> LinkedProducts { get; set; }
        public virtual DbSet<ListValue> ListValues { get; set; }
        public virtual DbSet<LogCheck> LogChecks { get; set; }
        public virtual DbSet<MacroText> MacroTexts { get; set; }
        public virtual DbSet<MacroTextCategory> MacroTextCategories { get; set; }
        public virtual DbSet<MergeExclusion> MergeExclusions { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<MrDxAl> MrDxAls { get; set; }
        public virtual DbSet<Pass> Passes { get; set; }
        public virtual DbSet<PassItem> PassItems { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<PatientDefault> PatientDefaults { get; set; }
        public virtual DbSet<PatientRecheck> PatientRechecks { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<PaymentPlan> PaymentPlans { get; set; }
        public virtual DbSet<PaymentsM> PaymentsMs { get; set; }
        public virtual DbSet<Pharmacy> Pharmacies { get; set; }
        public virtual DbSet<PpDbstatusSetting> PpDbstatusSettings { get; set; }
        public virtual DbSet<PpDbviewColumn> PpDbviewColumns { get; set; }
        public virtual DbSet<PpDbviewContent> PpDbviewContents { get; set; }
        public virtual DbSet<PpDbviewSetting> PpDbviewSettings { get; set; }
        public virtual DbSet<PpProgram> PpPrograms { get; set; }
        public virtual DbSet<PpUserGeneral> PpUserGenerals { get; set; }
        public virtual DbSet<PpUserProgram> PpUserPrograms { get; set; }
        public virtual DbSet<PpUserSection> PpUserSections { get; set; }
        public virtual DbSet<Practice> Practices { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductBundle> ProductBundles { get; set; }
        public virtual DbSet<ProductCat> ProductCats { get; set; }
        public virtual DbSet<ProductCertificate> ProductCertificates { get; set; }
        public virtual DbSet<ProductClientNote> ProductClientNotes { get; set; }
        public virtual DbSet<ProductConsent> ProductConsents { get; set; }
        public virtual DbSet<ProductDbInterface> ProductDbInterfaces { get; set; }
        public virtual DbSet<ProductEmployee> ProductEmployees { get; set; }
        public virtual DbSet<ProductLabel> ProductLabels { get; set; }
        public virtual DbSet<ProductMr> ProductMrs { get; set; }
        public virtual DbSet<ProductMrform> ProductMrforms { get; set; }
        public virtual DbSet<ProductMrlab> ProductMrlabs { get; set; }
        public virtual DbSet<ProductProfitCenter> ProductProfitCenters { get; set; }
        public virtual DbSet<ProductRaby> ProductRabies { get; set; }
        public virtual DbSet<ProductRecheck> ProductRechecks { get; set; }
        public virtual DbSet<ProductReminder> ProductReminders { get; set; }
        public virtual DbSet<ProductReminderFlag> ProductReminderFlags { get; set; }
        public virtual DbSet<ProductRemovedLog> ProductRemovedLogs { get; set; }
        public virtual DbSet<ProductRx> ProductRxes { get; set; }
        public virtual DbSet<ProductScom> ProductScoms { get; set; }
        public virtual DbSet<ProductSex> ProductSexes { get; set; }
        public virtual DbSet<ProductSoap> ProductSoaps { get; set; }
        public virtual DbSet<ProductSpecy> ProductSpecies { get; set; }
        public virtual DbSet<ProductTakehome> ProductTakehomes { get; set; }
        public virtual DbSet<ProductTimer> ProductTimers { get; set; }
        public virtual DbSet<ProductType> ProductTypes { get; set; }
        public virtual DbSet<ProductUserPref> ProductUserPrefs { get; set; }
        public virtual DbSet<ProductVetinsite> ProductVetinsites { get; set; }
        public virtual DbSet<ProductWarning> ProductWarnings { get; set; }
        public virtual DbSet<ProductWordDoc> ProductWordDocs { get; set; }
        public virtual DbSet<ProductsM> ProductsMs { get; set; }
        public virtual DbSet<ProgExclusion> ProgExclusions { get; set; }
        public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public virtual DbSet<PurchaseOrderIiDetail> PurchaseOrderIiDetails { get; set; }
        public virtual DbSet<PurchaseOrderItem> PurchaseOrderItems { get; set; }
        public virtual DbSet<PurchaseOrderPending> PurchaseOrderPendings { get; set; }
        public virtual DbSet<PurchaseOrderReceipt> PurchaseOrderReceipts { get; set; }
        public virtual DbSet<PurchaseOrdersCommon> PurchaseOrdersCommons { get; set; }
        public virtual DbSet<PvplXmldatum> PvplXmldata { get; set; }
        public virtual DbSet<QuickReceipt> QuickReceipts { get; set; }
        public virtual DbSet<QuickReceiptItem> QuickReceiptItems { get; set; }
        public virtual DbSet<QuickReceiptStorage> QuickReceiptStorages { get; set; }
        public virtual DbSet<RabiesHistory> RabiesHistories { get; set; }
        public virtual DbSet<RecentClient> RecentClients { get; set; }
        public virtual DbSet<RecentPatient> RecentPatients { get; set; }
        public virtual DbSet<Recheck> Rechecks { get; set; }
        public virtual DbSet<RecheckCat> RecheckCats { get; set; }
        public virtual DbSet<RemGlobal> RemGlobals { get; set; }
        public virtual DbSet<RemRemote> RemRemotes { get; set; }
        public virtual DbSet<RemReplaceHistory> RemReplaceHistories { get; set; }
        public virtual DbSet<RemReplacement> RemReplacements { get; set; }
        public virtual DbSet<RemSyncHistory> RemSyncHistories { get; set; }
        public virtual DbSet<ReplMergeFilter> ReplMergeFilters { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<ReportFunction> ReportFunctions { get; set; }
        public virtual DbSet<ReportList> ReportLists { get; set; }
        public virtual DbSet<ReportListItem> ReportListItems { get; set; }
        public virtual DbSet<ReportsAvailability> ReportsAvailabilities { get; set; }
        public virtual DbSet<ReportsDefault> ReportsDefaults { get; set; }
        public virtual DbSet<ReportsPrinter> ReportsPrinters { get; set; }
        public virtual DbSet<ReportsUserOption> ReportsUserOptions { get; set; }
        public virtual DbSet<Reservation> Reservations { get; set; }
        public virtual DbSet<ReservationAppliedBlockDay> ReservationAppliedBlockDays { get; set; }
        public virtual DbSet<ReservationBlockDay> ReservationBlockDays { get; set; }
        public virtual DbSet<ReservationOption> ReservationOptions { get; set; }
        public virtual DbSet<ReservationStatusType> ReservationStatusTypes { get; set; }
        public virtual DbSet<ReservationWaitingList> ReservationWaitingLists { get; set; }
        public virtual DbSet<Reservationcolor> Reservationcolors { get; set; }
        public virtual DbSet<Reservationday> Reservationdays { get; set; }
        public virtual DbSet<Reservationpatient> Reservationpatients { get; set; }
        public virtual DbSet<Reservationuseroption> Reservationuseroptions { get; set; }
        public virtual DbSet<Reservationvisualstatus> Reservationvisualstatuses { get; set; }
        public virtual DbSet<RxRemark> RxRemarks { get; set; }
        public virtual DbSet<RxSig> RxSigs { get; set; }
        public virtual DbSet<SchedComm> SchedComms { get; set; }
        public virtual DbSet<ScheduledProduct> ScheduledProducts { get; set; }
        public virtual DbSet<ScheduledProductEmployee> ScheduledProductEmployees { get; set; }
        public virtual DbSet<Session> Sessions { get; set; }
        public virtual DbSet<SetupModuleScreen> SetupModuleScreens { get; set; }
        public virtual DbSet<SetupPrinterDefault> SetupPrinterDefaults { get; set; }
        public virtual DbSet<Statusnote> Statusnotes { get; set; }
        public virtual DbSet<TaxesM> TaxesMs { get; set; }
        public virtual DbSet<Taxis> Taxes { get; set; }
        public virtual DbSet<TechLog> TechLogs { get; set; }
        public virtual DbSet<TmpRecommend> TmpRecommends { get; set; }
        public virtual DbSet<Todo> Todos { get; set; }
        public virtual DbSet<TodoDependency> TodoDependencies { get; set; }
        public virtual DbSet<TodoStatusColor> TodoStatusColors { get; set; }
        public virtual DbSet<TodoTaskList> TodoTaskLists { get; set; }
        public virtual DbSet<TodoUserOption> TodoUserOptions { get; set; }
        public virtual DbSet<Trainer> Trainers { get; set; }
        public virtual DbSet<TransAr> TransArs { get; set; }
        public virtual DbSet<TransCode> TransCodes { get; set; }
        public virtual DbSet<TransCreditBalance> TransCreditBalances { get; set; }
        public virtual DbSet<TransCreditBalancesBu> TransCreditBalancesBus { get; set; }
        public virtual DbSet<TransEmployee> TransEmployees { get; set; }
        public virtual DbSet<TransGiftCard> TransGiftCards { get; set; }
        public virtual DbSet<TransInterest> TransInterests { get; set; }
        public virtual DbSet<TransInterestBu> TransInterestBus { get; set; }
        public virtual DbSet<TransInventory> TransInventories { get; set; }
        public virtual DbSet<TransInventoryLot> TransInventoryLots { get; set; }
        public virtual DbSet<TransInvoiceStatus> TransInvoiceStatuses { get; set; }
        public virtual DbSet<TransNsf> TransNsfs { get; set; }
        public virtual DbSet<TransPatient> TransPatients { get; set; }
        public virtual DbSet<TransPayment> TransPayments { get; set; }
        public virtual DbSet<TransPaymentCard> TransPaymentCards { get; set; }
        public virtual DbSet<TransProduct> TransProducts { get; set; }
        public virtual DbSet<TransProductEmployee> TransProductEmployees { get; set; }
        public virtual DbSet<TransRx> TransRxes { get; set; }
        public virtual DbSet<TransTaxDtl> TransTaxDtls { get; set; }
        public virtual DbSet<TransTaxis> TransTaxes { get; set; }
        public virtual DbSet<TransTreatmentPlan> TransTreatmentPlans { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<TravelSheet> TravelSheets { get; set; }
        public virtual DbSet<TravelSheetProduct> TravelSheetProducts { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserArPref> UserArPrefs { get; set; }
        public virtual DbSet<UsersDbPrint> UsersDbPrints { get; set; }
        public virtual DbSet<UsersMr> UsersMrs { get; set; }
        public virtual DbSet<UsersMrPref> UsersMrPrefs { get; set; }
        public virtual DbSet<VaccHistory> VaccHistories { get; set; }
        public virtual DbSet<VaccPatHistory> VaccPatHistories { get; set; }
        public virtual DbSet<Vaccine> Vaccines { get; set; }
        public virtual DbSet<VaccineFlag> VaccineFlags { get; set; }
        public virtual DbSet<VaccineHistory> VaccineHistories { get; set; }
        public virtual DbSet<VaccinePatientDetail> VaccinePatientDetails { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<VendorContact> VendorContacts { get; set; }
        public virtual DbSet<VendorsIiAcct> VendorsIiAccts { get; set; }
        public virtual DbSet<VendorsShiptoAcct> VendorsShiptoAccts { get; set; }
        public virtual DbSet<VetNote> VetNotes { get; set; }
        public virtual DbSet<VetNotesImport> VetNotesImports { get; set; }
        public virtual DbSet<VetinsiteChange> VetinsiteChanges { get; set; }
        public virtual DbSet<VetinsiteOption> VetinsiteOptions { get; set; }
        public virtual DbSet<VnDx> VnDxes { get; set; }
        public virtual DbSet<VnIcon> VnIcons { get; set; }
        public virtual DbSet<VnIconsImport> VnIconsImports { get; set; }
        public virtual DbSet<VnImport> VnImports { get; set; }
        public virtual DbSet<Ward> Wards { get; set; }
        public virtual DbSet<WeightHistory> WeightHistories { get; set; }
        public virtual DbSet<Whatif> Whatifs { get; set; }
        public virtual DbSet<WhatifUsersetting> WhatifUsersettings { get; set; }
        public virtual DbSet<WorkScheduleAppliedDate> WorkScheduleAppliedDates { get; set; }
        public virtual DbSet<WorkScheduleAppliedTime> WorkScheduleAppliedTimes { get; set; }
        public virtual DbSet<WorkScheduleAtwork> WorkScheduleAtworks { get; set; }
        public virtual DbSet<WorkScheduleImage> WorkScheduleImages { get; set; }
        public virtual DbSet<WorkScheduleNotAtwork> WorkScheduleNotAtworks { get; set; }
        public virtual DbSet<WorkWeeklySchedule> WorkWeeklySchedules { get; set; }
        public virtual DbSet<Workstation> Workstations { get; set; }
        public virtual DbSet<Workstation1> Workstations1 { get; set; }
        public virtual DbSet<WorkstationCashdrawer> WorkstationCashdrawers { get; set; }
        public virtual DbSet<WorkstationPrinter> WorkstationPrinters { get; set; }
        public virtual DbSet<WorkstationStorage> WorkstationStorages { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=SLICKWEB\\SQLEXPRESS;Initial Catalog=asshole;Persist Security Info=True;User ID=sa;Password=MyCujo65");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.ApplyConfiguration(new Configurations.AcctBatchConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.AcctBatchDayConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.AcctBatchDetailConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.AcctLinkConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.AcctOptionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.AddressConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.AntechBreedConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.AntechBreedsMapConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.AntechProductConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.AntechProductMapConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.AntechSpeciesMapConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.AntechSpecyConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ApplicationConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ApplicationModuleConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.AppointmentConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ApptAccountConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ApptAppliedBlockDayConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ApptAppliedBlockTimeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ApptBlockDayConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ApptBlockTimeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ApptCallHistoryConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ApptCallMessageConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ApptCallOptionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ApptColorSchemeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ApptGroupConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ApptIconConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ApptLabelCommentConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ApptOptionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ApptOptionFieldConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ApptRecurringConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ApptResourceConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ApptResourceGroupConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ApptStatusTypeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ApptTypeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ApptUserPrefConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ArAssignedTemplateConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ArBuildHistoryConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ArChargeInterestConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ArClientSettingConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ArCommonConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ArGlobalSettingConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ArStmtHistoryConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ArStmtTemplateConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.AspErrorConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.BankConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.BreedConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.BucketTotalConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.BucketTotalsGlobalConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.BucketTotalsPcatConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.BucketTotalsPcenterConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.BucketTotalsPmtConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.BucketTotalsPtypeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.BucketTotalsTaxisConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CageConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CallLogConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CallLogPatientConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CashDrawerConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CashDrawersSbConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CashierConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CensusLayoutConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CensusLocationConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CensusOptionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CensusPatientLogConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CensusPatientLogLocationConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CensusResourceConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CensusResourceLogConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CensusResourceLogLocationConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CensusUserSettingConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CensusVisitReasonConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CensusWorkstationConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CertificateConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CertificateFieldConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CertificatesTemplateConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CityConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ClientConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ClientAutonumberConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ClientDefaultConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ClientDuplicateOptionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ClientLockConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ClientNoteConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ClientNoteStatusConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ClientTypeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ClientYtdConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ClinicScheduleConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CoatColorConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CommonConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CommunicationMethodConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.Consent2Configuration());
            modelBuilder.ApplyConfiguration(new Configurations.Consent2FldConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.Consent2MsgConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ControlledSubstanceConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpAttributeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpAttributeInvConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpClientLockConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpDatabaseConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpEmployeeComConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpEmployeeComProdConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpFranCommunicationConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpFranNameConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpImageConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpImageTextConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpImageThumbnailConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpMessageConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpMessageStatusConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpMrEfPicConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpMrViewConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpMrcvConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpMrcvClientPatientConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpPracticeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpPricingConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpPricingAttConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpPricingInvConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpPricingProdConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpRemoteConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpRemoteDatabaseConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpServerConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpSsResultConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpSsResultsLinkConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpTaskConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpTaxingConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpTaxingProdConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpTranConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpTransErrConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpTransMConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpTransMsgConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CorpVendorsLinkConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CountryConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CsCommonConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.CustomDictConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DLayoutConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DbClientConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DbColumnConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DbIntUpdateConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DbInventoryConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DbModuleConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DbModulesMConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DbPatientConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DbProductConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DbSexPronounConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DbTableConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DesktopReportConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DicomaeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DiscountConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DiscountPercentConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DiscountTypeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DocumentsHistoryConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.DocumentsUserOptionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EcRptDetailConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EfComboValueConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EfLabFieldConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EfLabFieldValueConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EfLabFieldsDynaConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EformConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EformCategoryConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EformsCatConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EformsFieldConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EformsTableConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EmailAddressConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EmailBlockedConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EmailSettingConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EmailTemplateConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EmailTopicConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EmployeeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EmployeeBundleConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EmployeeBundleDtlConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EmployeeCommissionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EmployeeCustomConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EmployeeGroupConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EmployeesCertificateConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EmployeesMConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EmployeesMrConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EmployeesRecheckConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EstimateConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EstimateColorsBConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EstimateConsent2Configuration());
            modelBuilder.ApplyConfiguration(new Configurations.EstimateConsent2MsgConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EstimateFlagsBConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EstimateLabelsBConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EstimatePracticeConsentConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EstimatePracticeSettingConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EstimateProductConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EstimateProductEmployeeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EstimateSectionFieldConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EstimateSectionsBConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EstimateTemplateConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EstimateTemplatesBConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EventLogConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.EventLogOptionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ExportFieldConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ExportTemplateConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.FieldDefinitionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.FindScreenConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.FlagConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.GlobalDictionaryConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.HardcodedPrinterConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.HdAcctConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.HdCancelItemConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.HdErrorConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.HdInvConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.HdInvMConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.HdListConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.HdLockConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.HdOptionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.HdOrderConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.HdOrderHistoryConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.HdOrderItemConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.HdOrderItemEmployeeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.HdOrderItemRxConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.HdPriceQuoteConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.HdRxDefaultConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.HdSexConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.HdSpecyConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.HdVprConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.HealthPlanConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.HealthPlanProductConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.HealthyPetOptionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.IPatchConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.IaCommonConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.IdvDynChangeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ImageConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ImageTextConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ImageThumbnailConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ImpEmailLogConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ImportLabWidthConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InfoNoteConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvBarcodeLinkConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InventoryAdjustmentConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InventoryAttributeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InventoryBarcodeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InventoryCatConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InventoryDefaultConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InventoryInteractionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InventoryItemConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InventoryItemsMConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InventoryLotConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InventoryOptionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InventoryPvplinkConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InventoryQtyCommittedConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InventoryStorageConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InventoryStorageItemConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InventoryUserPrefConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InventoryVendorConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InventoryWantConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceAttachedMrConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceClientSupermodeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceColorsBConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceDefaultTemplateConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceEmpBunLogConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceFlagsBConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceHealthPlanConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceHealthPlanProductConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceInventoryConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceInventoryLotConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceLabelsBConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceListinfoConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceLogConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoicePatientConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoicePracticeSettingConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceProductConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceProductEmployeeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceReceiptTempConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceRxConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceScriptConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceSectionFieldConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceSectionsBConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceSessionEmployeeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceSplitBillingConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceStatusConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceSupermodeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceTemplateConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceTemplateImageConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceTemplatesBConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.InvoiceTimerConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.IpacslookupConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ItemSigConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.LabValueRangeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.LabelBundleConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.LabelBundleItemConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.LabelDefaultConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.LabelItemsEnhConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.LabelItemsStdConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.LabelLogConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.LabelPageConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.LabelPrinterConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.LabelsEnhConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.LabelsStdConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.LicenseConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.LinkedProductConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ListValueConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.LogCheckConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.MacroTextConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.MacroTextCategoryConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.MergeExclusionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ModuleConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.MrDxAlConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PassConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PassItemConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PatientConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PatientDefaultConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PatientRecheckConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PaymentConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PaymentPlanConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PaymentsMConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PharmacyConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PpDbstatusSettingConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PpDbviewColumnConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PpDbviewContentConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PpDbviewSettingConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PpProgramConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PpUserGeneralConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PpUserProgramConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PpUserSectionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PracticeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductBundleConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductCatConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductCertificateConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductClientNoteConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductConsentConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductDbInterfaceConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductEmployeeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductLabelConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductMrConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductMrformConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductMrlabConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductProfitCenterConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductRabyConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductRecheckConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductReminderConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductReminderFlagConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductRemovedLogConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductRxConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductScomConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductSexConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductSoapConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductSpecyConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductTakehomeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductTimerConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductTypeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductUserPrefConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductVetinsiteConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductWarningConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductWordDocConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProductsMConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ProgExclusionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PurchaseOrderConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PurchaseOrderIiDetailConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PurchaseOrderItemConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PurchaseOrderPendingConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PurchaseOrderReceiptConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PurchaseOrdersCommonConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.PvplXmldatumConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.QuickReceiptConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.QuickReceiptItemConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.QuickReceiptStorageConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.RabiesHistoryConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.RecentClientConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.RecentPatientConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.RecheckConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.RecheckCatConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.RemGlobalConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.RemRemoteConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.RemReplaceHistoryConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.RemReplacementConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.RemSyncHistoryConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ReplMergeFilterConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ReportConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ReportFunctionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ReportListConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ReportListItemConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ReportsAvailabilityConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ReportsDefaultConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ReportsPrinterConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ReportsUserOptionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ReservationConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ReservationAppliedBlockDayConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ReservationBlockDayConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ReservationOptionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ReservationStatusTypeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ReservationWaitingListConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ReservationcolorConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ReservationdayConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ReservationpatientConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ReservationuseroptionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ReservationvisualstatusConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.RxRemarkConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.RxSigConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.SchedCommConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ScheduledProductConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.ScheduledProductEmployeeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.SessionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.SetupPrinterDefaultConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.StatusnoteConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TaxesMConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TaxisConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TechLogConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TmpRecommendConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TodoConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TodoDependencyConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TodoStatusColorConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TodoTaskListConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TodoUserOptionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TrainerConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TransArConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TransCodeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TransCreditBalanceConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TransCreditBalancesBuConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TransEmployeeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TransGiftCardConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TransInterestConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TransInterestBuConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TransInventoryConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TransInventoryLotConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TransInvoiceStatusConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TransNsfConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TransPatientConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TransPaymentConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TransPaymentCardConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TransProductConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TransProductEmployeeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TransRxConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TransTaxDtlConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TransTaxisConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TransTreatmentPlanConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TransactionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TravelSheetConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.TravelSheetProductConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.UserConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.UserArPrefConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.UsersDbPrintConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.UsersMrConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.UsersMrPrefConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.VaccHistoryConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.VaccPatHistoryConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.VaccineConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.VaccineFlagConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.VaccineHistoryConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.VaccinePatientDetailConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.VendorConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.VendorContactConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.VendorsIiAcctConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.VendorsShiptoAcctConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.VetNoteConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.VetNotesImportConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.VetinsiteChangeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.VetinsiteOptionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.VnDxConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.VnIconConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.VnIconsImportConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.VnImportConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.WardConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.WeightHistoryConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.WhatifConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.WhatifUsersettingConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.WorkScheduleAppliedDateConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.WorkScheduleAppliedTimeConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.WorkScheduleAtworkConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.WorkScheduleImageConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.WorkScheduleNotAtworkConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.WorkWeeklyScheduleConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.WorkstationConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.Workstation1Configuration());
            modelBuilder.ApplyConfiguration(new Configurations.WorkstationCashdrawerConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.WorkstationPrinterConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.WorkstationStorageConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
